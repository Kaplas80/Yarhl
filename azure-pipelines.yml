# Yarhl Build and Release pipeline
strategy:
  matrix:
    linux:
      imageName: 'ubuntu-latest'
    mac:
      imageName: 'macOS-latest'
    windows:
      imageName: 'windows-latest'

pool:
  vmImage: $(imageName)

# Avoid building twice on PR (branch push + PR)
trigger:
  batch: true
  branches:
    exclude:
    - gh-pages

steps:
# Prerequisites:
- task: UseDotNet@2
  displayName: 'Install .NET Core 3.1 SDK'
  inputs:
    packageType: sdk
    version: 3.1.x

- task: UseDotNet@2
  displayName: 'Install .NET 5.0 SDK'
  inputs:
    packageType: sdk
    version: 5.0.x

- script: dotnet tool restore
  displayName: 'Restore build tool'

- script: |
    SYMLINK=6_8_0
    MONOPREFIX=/Library/Frameworks/Mono.framework/Versions/$SYMLINK
    echo "##vso[task.setvariable variable=DYLD_FALLBACK_LIBRARY_PATH;]$MONOPREFIX/lib:/lib:/usr/lib:$DYLD_LIBRARY_FALLBACK_PATH"
    echo "##vso[task.setvariable variable=PKG_CONFIG_PATH;]$MONOPREFIX/lib/pkgconfig:$MONOPREFIX/share/pkgconfig:$PKG_CONFIG_PATH"
    echo "##vso[task.setvariable variable=PATH;]$MONOPREFIX/bin:$MONOPREFIX/Commands:$PATH"
    sudo rm /Library/Frameworks/Mono.framework/Versions/Current
    sudo ln -s $MONOPREFIX /Library/Frameworks/Mono.framework/Versions/Current
  displayName: '[MacOS] Enable Mono'
  condition: eq(variables['Agent.OS'], 'Darwin')

# Run Cake
- script: dotnet cake --verbosity=diagnostic --target=CI-Linux
  displayName: '[Linux] Build, test and validate'
  condition: eq(variables['Agent.OS'], 'Linux')

- script: dotnet cake --verbosity=diagnostic --target=CI-MacOS
  displayName: '[MacOS] Build, test and validate'
  condition: eq(variables['Agent.OS'], 'Darwin')

- powershell: dotnet cake --verbosity=diagnostic --target=CI-Windows
  displayName: '[Windows] Build, test and validate'
  condition: eq(variables['Agent.OS'], 'Windows_NT')

# Integrate results in Azure DevOps
- task: PublishTestResults@2
  displayName: Publish test results
  inputs:
    testResultsFormat: 'NUnit'
    testResultsFiles: 'TestResult.xml'
    testRunTitle: Yarhl Tests

- task: PublishCodeCoverageResults@1
  displayName: Publish code coverage results
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: coverage_report/Cobertura.xml
    failIfCoverageEmpty: true

# Publish artifacts
- task: PublishPipelineArtifact@0
  displayName: '[Linux] Publish NuGet artifacts'
  inputs:
    artifactName: 'Yarhl NuGet'
    targetPath: artifacts/
  condition: eq(variables['Agent.OS'], 'Linux')

- task: PublishPipelineArtifact@0
  displayName: '[Linux] Publish doc artifacts'
  inputs:
    artifactName: 'Documentation'
    targetPath: docs/_site/
  condition: eq(variables['Agent.OS'], 'Linux')
