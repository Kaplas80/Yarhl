R: Gendarme.Rules.Portability.MonoCompatibilityReviewRule
# Gendarme detects that Type.Equals is not implemented in Mono but this doesn't seem to be the case
M: System.Boolean Yarhl.PluginManager/TypeParamComparer::Equals(System.Type,System.Type)
M: System.Object Yarhl.IO.DataReader::ReadByType(System.Type)
M: System.Void Yarhl.IO.DataWriter::Write(System.Type,System.Object)
M: System.Void Yarhl.IO.DataWriter::Write(System.String,System.Type,System.Boolean,System.Text.Encoding,System.Int32)

R: Gendarme.Rules.Design.Generic.AvoidMethodWithUnusedGenericTypeRule
# We want to convert by specifying the type in a generic
M: Yarhl.FileSystem.Node Yarhl.FileSystem.Node::TransformTo()
M: Yarhl.FileSystem.Node Yarhl.FileSystem.Node::TransformWith()
M: Yarhl.FileSystem.Node Yarhl.FileSystem.Node::TransformWith(TParam)
M: System.Object Yarhl.FileFormat.ConvertFormat::With(System.Object)
M: System.Object Yarhl.FileFormat.ConvertFormat::With(TParam,System.Object)
M: System.Collections.Generic.IEnumerable`1<System.Type> Yarhl.PluginManager::FindExtensions()
M: System.Collections.Generic.IEnumerable`1<System.Type> Yarhl.PluginManager::FindExtensions()
M: System.Object Yarhl.IO.DataReader::Read()

R: Gendarme.Rules.Design.ListsAreStronglyTypedRule
# It looks like a bug in Gendarme
# It makes no sense for a ReadOnlyCollection that furthermore is strongly type because of the generic
T: Yarhl.FileSystem.NavigableNodeCollection`1

R: Gendarme.Rules.Correctness.EnsureLocalDisposalRule
# It's a factory, we are creating the objects
M: Yarhl.FileSystem.Node Yarhl.FileSystem.NodeFactory::FromFile(System.String,System.String)
M: Yarhl.FileSystem.Node Yarhl.FileSystem.NodeFactory::FromDirectory(System.String,System.String,System.String,System.Boolean)
M: Yarhl.FileSystem.Node Yarhl.FileSystem.NodeFactory::FromSubstream(System.String,Yarhl.IO.DataStream,System.Int64,System.Int64)
T: Yarhl.IO.DataStreamFactory
# In the DataStream we are sure we will dispose the streams created in the ctor.
M: System.Void Yarhl.IO.DataStream::.ctor()
M: System.Void Yarhl.IO.DataStream::.ctor(System.String,Yarhl.IO.FileOpenMode)

R: Gendarme.Rules.Correctness.DisposableFieldsShouldBeDisposedRule
# Bug in Gendarme because I am using the ? operator
T: Yarhl.FileSystem.Node

R: Gendarme.Rules.Maintainability.AvoidUnnecessarySpecializationRule
# In this case it is not possible since one of the methods creates a derived type.
M: System.Void Yarhl.FileSystem.NodeFactory::CreateContainersForChild(Yarhl.FileSystem.Node,System.String,Yarhl.FileSystem.Node)

R: Gendarme.Rules.Concurrency.ReviewLockUsedOnlyForOperationsOnVariablesRule
# We want to lock between methods including the initialization. It is called a few times and it's not easy to fix.
M: System.Void Yarhl.PluginManager::Shutdown()

R: Gendarme.Rules.Naming.UseCorrectSuffixRule
# It is our implementation of Stream.
T: Yarhl.IO.IStream
T: Yarhl.IO.DataStream
T: Yarhl.IO.StreamFormat.LazyFileStream
T: Yarhl.IO.StreamFormat.RecyclableMemoryStream
# Gendarme doesn't know about ReadOnlyCollection
T: Yarhl.FileSystem.NavigableNodeCollection`1

R: Gendarme.Rules.Performance.AvoidUnneededUnboxingRule
# Actually we are unboxing once
M: System.Void Yarhl.IO.DataWriter::WriteOfType(System.Type,System.Object)

R: Gendarme.Rules.Maintainability.AvoidLackOfCohesionOfMethodsRule
# We are implementing a general streams
T: Yarhl.IO.DataStream
T: Yarhl.IO.DataWriter
T: Yarhl.IO.TextReader
T: Yarhl.IO.TextWriter
T: Yarhl.IO.StreamFormat.LazyFileStream

R: Gendarme.Rules.Maintainability.VariableNamesShouldNotMatchFieldNamesRule
# I allow this to happen only for constructors
T: Yarhl.IO.DataStream
T: Yarhl.IO.StreamFormat.LazyFileStream

R: Gendarme.Rules.Globalization.PreferIFormatProviderOverrideRule
# It looks like a bug in Gendarme, we are adding a char to a string
M: System.String Yarhl.IO.TextReader::ReadToToken(System.String)

R: Gendarme.Rules.Design.Generic.DoNotExposeNestedGenericSignaturesRule
# This should be allowed for Enumeration since user won't work directly with them
M: System.Collections.Generic.IEnumerable`1<System.Composition.ExportFactory`1<T>> Yarhl.PluginManager::FindLazyExtensions()
M: System.Collections.Generic.IEnumerable`1<System.Composition.ExportFactory`2<T,TMetadata>> Yarhl.PluginManager::FindLazyExtensions()
M: System.Collections.Generic.IEnumerable`1<System.Composition.ExportFactory`2<Yarhl.FileFormat.IFormat,Yarhl.FileFormat.FormatMetadata>> Yarhl.PluginManager::GetFormats()
M: System.Collections.Generic.IEnumerable`1<System.Composition.ExportFactory`2<Yarhl.FileFormat.IConverter,Yarhl.FileFormat.ConverterMetadata>> Yarhl.PluginManager::GetConverters()

R: Gendarme.Rules.Design.ConsiderAddingInterfaceRule
# They are not a format
T: Yarhl.IO.DataReader
T: Yarhl.IO.DataWriter
T: Yarhl.IO.TextReader
T: Yarhl.IO.TextWriter
T: Yarhl.FileSystem.Node

R: Gendarme.Rules.Performance.AvoidUnneededFieldInitializationRule
# Better be explicit in this case for clarity
M: System.Void Yarhl.IO.DataStream::.ctor()
M: System.Void Yarhl.IO.DataStream::.ctor(Yarhl.IO.IStream,System.Int64,System.Int64,System.Boolean)
M: System.Void Yarhl.IO.DataStream::.ctor(Yarhl.IO.DataStream,System.Int64,System.Int64)

R: Gendarme.Rules.Performance.AvoidUncalledPrivateCodeRule
# False positive, it's called inside the Sort method
M: System.Int32 Yarhl.FileSystem.NavigableNode`1/DefaultNavigableNodeComparer::Compare(T,T)
# False positive, it's called inside the WriteOfType method
M: System.Void Yarhl.IO.DataWriter::WriteUsingReflection(System.Type,System.Object)
